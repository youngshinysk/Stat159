nrow(Minneapolis2013)
tail(Minneapolis2013)
Minneapolis2013
head(Minneapolis2013)
freq(Minneapolis2013$Second)
table(Minneapolis2013$Second)
max(table(Minneapolis2013$Second))
order((table(Minneapolis2013$Second)))
sort((table(Minneapolis2013$Second)))
sort((table(Minneapolis2013$Second)), decreasing = TRUE)
head(sort((table(Minneapolis2013$Second)), decreasing = TRUE), 5
head(sort((table(Minneapolis2013$Second)), decreasing = TRUE), 5)
head(sort((table(Minneapolis2013$Second)), decreasing = TRUE), 5)
head(Minneapolis2013)
nrow(filter(Minneapolis2013, First == 'undervote'))
filter(Minneapolis2013, First == 'undervote')
head(Minneapolis2013)
unique(Minneapolis2013$Precinct)
group_by(Minneapolis2013, Precinct)
summarise(Minneapolis2013, Precinct)
summarise(Minneapolis2013, sort((table(Minneapolis2013$Second))))
summarise(Minneapolis2013, sort((table(Minneapolis2013$Precinct))))
(table(Minneapolis2013$Precinct
table(Minneapolis2013$Precinct
table(Minneapolis2013$Precinct
)
summarise(Minneapolis2013, Minneapolis2013$Precinct)
head(table(Minneapolis2013$Precinct), 1)
BabyNames %>%
group_by(BabyNames, year, sex) %>%
summarise(BabyNames, total = sum(count))
babynames
babynames %>%
group_by(year, sex) %>%
summarise(total = sum(count))
babynames %>%
group_by(year, sex) %>%
summarise(total = sum(count))
babynames %>%
group_by(year, sex) %>%
summarise(total = n())
zipgeograpy
ZipGeography
zipgeography
Minneapolis2013 %>%
group_by(First) %>%
summarise(voteReceived = n())
zipgeography %>%
group_by(State) %>%
summarise(pop = sum(Population))
Minneapolis2013 %>%
group_by(First) %>%
summarise(voteReceived = n())
group_by(Minneapolis2013, First)
head(Minneapolis2013)
babynames
arrange(babynames, sex, count)
arrange(babynames, sex)
arrange(babynames, sex, n)
filter(babynames, sex = 'F')
filter(babynames, sex == 'F')
select(babynames, name, n)
summarise(babynames, total = n())
sum(babynames$n)
summarise(babynames, total = sum(BabyNames$count))
summarise(Babynames, total = sum(babynames$count))
summarise(babynames, total = sum(babynames$count))
summarise(babynames, total = sum(nabynames$n))
summarise(babynames, total = sum(babynames$n))
summarise(babynames, total = sum(n))
babynames
install.packages("DataComputing")
library("DataComputing")
library(DataComputing)
library(dplyr)
is.na(babynames)
arrange(Minneapolis2013, First, Second)
head(arrange(Minneapolis2013, First, Second)
)
table(Minneapolis2013$First & Minneapolis2013$Second)
summarise(Minneapolis2013, First, Second)
head(arrange(Minneapolis2013, First, Second), 20)
head(arrange(Minneapolis2013, First, Second), 50)
counted = ddply(Minneapolis2013, c('First', 'Second'), nrow)
library(plyr)
counted = ddply(Minneapolis2013, c('First', 'Second'), nrow)
counted
head(counted)
sort(ddply(Minneapolis2013, c('First', 'Second'), nrow))
counted = ddply(Minneapolis2013, c('First', 'Second'), nrow)
sort(counted)
counted = ddply(Minneapolis2013, c('First', 'Second'), nrow)
counted
head(counted)
counted = counted[with(counted, order(count)),]
names(counted) = 'count'
head(counted)
counted = ddply(Minneapolis2013, c('First', 'Second'), nrow)
names(counted) = 'count'
counted
head(countd)
head(counted)
names(counted) = c('First', 'Second', 'Count')
head(counted)
sort(counted, Count)
sort(counted, counted$Count)
sort(counted$Count)
table(counted)
head(table(counted))
counted <- counted[with(counted, order(-count)),]
counted <- counted[with(counted, order(-Count)),]
head(counted)
with(counted, order(-Count))
head(counted, 1)
counted <- counted[with(counted, order(Count)),]
head(counted, 1)
counted <- counted[with(counted, order(-Count)),]
head(counted, 1)
today()
library(lubridate)
install.packages(lubridate)
install.packages('lubridate')
library(lubridate)
today()
class(today())
now()
now()
ymd("2016/02 10")
ymd("2016/0210")
ymd("2016.02 10")
date("2016/02 10")
week(today())
ymd("2015.02 10") + year(5)
ymd("2015.02 10") + years(5)
ymd("2015.02 10") + month(3)
ymd("2015.02 10") + month(20)
dminutes(60)
data=read.table("~/Downloads/s154/Assignment 2/code/parkinsons.data",header=TRUE,sep=",")
data=read.table("~/Downloads/parkinsons.data",header=TRUE,sep=",")
data = as.matrix(data[,-1])
set.seed(3041993)
data = data[sample(nrow(data)),]
status = data[,"status"]
status
data
View(data)
data = data[, -which(colnames(data)=="status") ]
dataHealthy = data[status==0,]
dataParks = data[status==1,]
nHealthy = nrow(dataHealthy)
nParks = nrow(dataParks)
data[1:2,]
trainf = 0.8
Xtrain = rbind(dataHealthy[1:floor( trainf *nHealthy ),],
dataParks [1:floor ( trainf *nParks ),])
Xtrain
View(Xtrain)
?floor
Xtrain1 = cbind(1,scale(Xtrain))
View(year.count)
View(Xtrain1)
w = solve(t(Xtrain1)%*%Xtrain1,t(Xtrain1)%*%Ttrain)
trainf = 0.8
Xtrain = rbind(dataHealthy[1:floor( trainf *nHealthy ),],
dataParks [1:floor ( trainf *nParks ),])
Ttrain = matrix(c(rep(1,floor( trainf*nHealthy)),rep(2, floor ( trainf *nParks))))
Xtest = rbind(dataHealthy[-(1:floor(trainf*nHealthy )),],
dataParks[-(1:floor ( trainf *nParks )),])
Ttest = matrix(c(rep(1,nHealthy-floor(trainf*nHealthy)),
rep(2,nParks-floor( trainf *nParks))))
#===========================================#
#LS Regression by hand
#===========================================#
#STANDARDIZE
Xtrain1 = cbind(1,scale(Xtrain))
#CALCULATE W (COEFFS FOR LS REGRESSION)
w = solve(t(Xtrain1)%*%Xtrain1,t(Xtrain1)%*%Ttrain)
w
View(w)
Xtrain1 = cbind(1,scale(Xtrain))
w = solve(t(Xtrain1)%*%Xtrain1,t(Xtrain1)%*%Ttrain)
View(w)
TtrainPredicted = Xtrain1 %*% w
TtestPredicted = cbind(1,scale(Xtest)) %*% w
pCorrectTrain = sum(apply(abs(cbind(TtrainPredicted-1, TtrainPredicted-2)),
1, which.min) == Ttrain) / length(Ttrain) * 100.0
makeQDADiscF = function(mean,sigma,prior,X) {
sigmaInv = solve(sigma)
diff= X - matrix(mean,nrow(X),ncol(X),byrow=TRUE)
return(-0.5 * log(det(sigma)) - 0.5 * rowSums(diff %*% sigmaInv * diff) + log(prior))
}
makeQDADiscF
qdadisc1tr = makeQDADiscF(mean1,cov1,nHealthy/(nHealthy+nParks),Xtrains)
mean1 = colMeans(Xtrains[Ttrain==1,])
cov1 = cov(Xtrains[Ttrain==1,])
mean2 = colMeans(Xtrains[Ttrain==2,])
cov2 = cov(Xtrains[Ttrain==2,])
N = nHealthy + nParks
covavg = cov1 * nHealthy/N + cov2 * nParks/N
#Form the QDA discriminant functions
makeQDADiscF = function(mean,sigma,prior,X) {
sigmaInv = solve(sigma)
diff= X - matrix(mean,nrow(X),ncol(X),byrow=TRUE)
return(-0.5 * log(det(sigma)) - 0.5 * rowSums(diff %*% sigmaInv * diff) + log(prior))
}
qdadisc1tr = makeQDADiscF(mean1,cov1,nHealthy/(nHealthy+nParks),Xtrains)
qdadisc2tr = makeQDADiscF(mean2,cov2,nParks/(nHealthy+nParks),Xtrains)
qdadisc1ts = makeQDADiscF(mean1,cov1,nHealthy/(nHealthy+nParks),Xtests)
qdadisc2ts = makeQDADiscF(mean2,cov2,nParks/(nHealthy+nParks),Xtests)
Xtrains = scale(Xtrain)
Xtests = scale(Xtest)
mean1 = colMeans(Xtrains[Ttrain==1,])
cov1 = cov(Xtrains[Ttrain==1,])
mean2 = colMeans(Xtrains[Ttrain==2,])
cov2 = cov(Xtrains[Ttrain==2,])
N = nHealthy + nParks
covavg = cov1 * nHealthy/N + cov2 * nParks/N
#Form the QDA discriminant functions
makeQDADiscF = function(mean,sigma,prior,X) {
sigmaInv = solve(sigma)
diff= X - matrix(mean,nrow(X),ncol(X),byrow=TRUE)
return(-0.5 * log(det(sigma)) - 0.5 * rowSums(diff %*% sigmaInv * diff) + log(prior))
}
qdadisc1tr = makeQDADiscF(mean1,cov1,nHealthy/(nHealthy+nParks),Xtrains)
qdadisc2tr = makeQDADiscF(mean2,cov2,nParks/(nHealthy+nParks),Xtrains)
qdadisc1ts = makeQDADiscF(mean1,cov1,nHealthy/(nHealthy+nParks),Xtests)
qdadisc2ts = makeQDADiscF(mean2,cov2,nParks/(nHealthy+nParks),Xtests)
qdadisc1tr
p=par(mfrow=c(1,2),bty="n")
matplot(cbind(Ttrain, TtrainPredicted ), type="b",pch=1,lty=1,
xlab="Sample",ylab="True and Predicted Class",main="Train Data")
matplot(cbind(Ttest,TtestPredicted ), type="b",pch=1,lty=1,
xlab="Sample",ylab="True and Predicted Class",main="Test Data")
par(p)
Xtrains = scale(Xtrain)
Xtrains
View(Xtrains)
[Ttrain == 1, ]
Xtrains[Ttrain == 1,]
Xtrains = scale(Xtrain)
Xtests = scale(Xtest)
mean1 = colMeans(Xtrains[Ttrain==1,])
mean1
Ttrain
cov1
View(cov1)
?solve
death_age_survivor = select(titanic, Sex, Age, Survived)
ggplot(death_age_survivor, aes(x = Sex, y = Age, col = Survived)) + geom_point()
library(DBI)
data = read.csv('http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv')
a =  lm(Sales~TV, data =)
a =  lm(Sales~TV, data = data)
a
summary(a)
setwd("~/Desktop/Stat159")
setwd("~/Desktop/Stat159/Stat159/stat159-fall2016-hw02/report")
a = load('regression.RData')
a = load('../data/regression.RData')
a
summary(a)
a
summary(a)
a
setwd("~/Desktop/Stat159/Stat159/stat159-fall2016-hw02")
a = lm(Sales ~ TV, data = "data/Advertising.csv")
setwd("~/Desktop/Stat159/Stat159/stat159-fall2016-hw02")
setwd("~/Desktop/Stat159/Stat159/stat159-fall2016-hw02/report")
a = lm(Sales ~ TV, data = "../data/Advertising.csv")
setwd("~/Desktop/Stat159/Stat159/stat159-fall2016-hw02/data")
a = lm(Sales ~ TV, data = "Advertising.csv")
adv = read.csv("Advertising.csv")
a = lm(Sales ~ TV, data = 'Advertising.csv')
a = lm(Sales ~ TV, data = adv)
a
summary(a)
b = summary(a)
b
lmdata = load(regression.RData)
setwd("~/Desktop/Stat159/Stat159/stat159-fall2016-hw02/data")
lmdata = load('regression.RData')
lmdata
class(lmdata)
fit
lmadata
lmdata
fit
write.table(lmdata)
write.table(fit)
install.packages(stargazer)
install.packages('stargazer')
library(stargazer)
stargazer(fit)
stargazer(fit, type = 'text', title ='stat', digits = 1)
summary(fit)
?summary.lm
deviance(fit)/df.residual(fit)
sqrt(deviance(fit)/df.residual(fit))
summary(fit$run1)$r.squared
summary(fit$run1)
fit$r.squared
fit$fstatistics
summary.fit
fit
summary(fit)
summary(fit)$r.squared
rse = sqrt(deviance(fit)/df.residual(fit))
rsquared = summary(fit)$r.squared
fstat = summary(fit)$fstatistics
table2 = matrix(c(rse,rsquared,fstat), ncol = 1, byrow = FALSE)
table2
fstat
summary(fit)$fstatistics
summary(fit)$f.statistics
fstat = summary(fit)$fstatistics
fstat = summary(fit)$fstatistic
fstat
fstat$1
fstat[0]
class(fstat)
fstat
fstat['value']
class(fstat)
table2 = matrix(c(rse,rsquared,fstat), ncol = 1, byrow = FALSE)
table2 = matrix(c(rse,rsquared,fstat), ncol = 1, byrow = FALSE)
table2 = matrix(c(rse,rsquared,fstat['value']), ncol = 1, byrow = FALSE)
table2
colnames(table2) = 'Value'
table2
rownames(table2) = c('Residual standard error', 'R^2', 'F-statistic')
table2
colnames(table2) = c('Quantity', 'Value')
as.data.frame(table2)
table2 = as.data.frame(table2)
colnames(table2) = c('Quantity', 'Value')
as.table(table2)
class(table2)
table2 = matrix(c(rse,rsquared,fstat), ncol = 1, byrow = FALSE)
table2
as.table(table2)
colnames(table2) = c('Quantity', 'Valeu')
a = c('a','b','c','d','e')
cbind(a, table2)
eaf = cbind(a, table2)
rownames(eaf) = NULL
eaf
colnames(eaf) = c('asdf','asdf')
eaf
rownames(eaf) = c()
eaf
a = c('a','b')
b = c('c','d')
setNames(a,b)
as.table(a,b)
as.table(setNames(a,b))
table(rep(a,b))
rbind(a = 23, b = 24, c = 34)
a = c('a','b')
b = c('c','d')
c = cbind(a,b)
c
names(dimnames(c)) = c('a','')
c
names(dimnames(c)) = c('a')
c
a
library(dplyr)
c = add_rownames(a, 'value')
c = add_rownamesca, 'value')
c = add_rownames(c), 'value')
c = add_rownames(c, 'value')
c
c$names = rownames(c
)
c$names = rownames(c)
c
c
c = table(a,b)
c
c
c
c
c
c
a
b
table(a,b)
matrix(a,b)
matrix(c(a,b)
)
data.frame(quantity = a, hey = b)
data.frame(quantity = a, hey = b)
hi = data.frame(quantity = a, hey = b)
hi
hi[2]
[1]
hi[1]
fit
summary(fit)$residuals
summary(fit)$coefficients
a = summary(fit)$coefficients
a
formattable(a, digits = 4)
rse = sqrt(deviance(fit)/df.residual(fit))
rsquared = summary(fit)$r.squared
fstat = summary(fit)$fstatistic
rse = sqrt(deviance(fit)/df.residual(fit))
rsquared = summary(fit)$r.squared
fstat = summary(fit)$fstatistic['value']
fstat
table2
table2 = matrix(c(rse, rsquared, fstat))
table2
summary(fit)
table2
rownames(table2) = c('residual', 'r', 'fstat')
table2
colnames(table2) = 'value'
table2
dimnames(table2) = c('quantity', 'value')
?dimnames
table2
mat = as.matrix(table2)
mat
names(dimnames(mat)) = c('quantity', '')
mat
setwd("~/Desktop/Stat159")
setwd("~/Desktop/Stat159/Stat159/stat159-fall2016-hw02-images")
setwd("~/Desktop/Stat159/Stat159/stat159-fall2016-hw02/images")
load(img = 'scatterplot-tv-sales.pdf')
load(img = 'scatterplot-tv-sales.png')
load('scatterplot-tv-sales.png')
plot(fit)
fit
advertising
fit
fit
plot(fit)
fit
fit
a = lm(Sales~TV, fit)
advertising
fit
adv
fit = lm(Sales~TV, adv)
fit
plot(fit)
plot(fit, xlim = c(0,30), ylim= c(0,5))
ad
adv
plot(adv)
plot(fit)
abline(fit)
abline(fit, xlim = c(0,200), ylim = c(0,30))
abline(fit)
plot(Sales, TV)
plot(fit)
attach(adv)
plot(Sales, TV)
plot(TV, Sales)
plot(adv$TV, adv$Sales)
plot(TV, Sales)
abline(fit)
abline(fit, col = 'red')
table2 = matrix(c(rse, rsquared, fstat), ncol = 1)
tabl2
table2
names(dimnames(table2)) = c('Quantity', '')
table2 = as.matrix(table2)
names(dimnames(table2)) = c('Quantity', '')
rownames(table2) = c('RSS', 'R^2', 'F-statistic')
table2
colnames(table2) = 'Value'
table2
names(dimnames(table2)) = c('Quantity', '')
table2
install.packages(png)
install.packages('png')
readPNG('../images/scatterplot-tv-sales.png')
library(png)
readPNG('../images/scatterplot-tv-sales.png')
a = readPNG('../images/scatterplot-tv-sales.png')
include_graphics('../images/scatterplot-tv-sales.png')
![Image](images/scatterplot-tv-sales.png)
![Image](path/to/image)
![](images/scatterplot-tv-sales.png)
install.packages(xtable)
install.packages('xtable')
library(xtable)
fit
table(lm)
table(fit)
xtable(fit)
options(xtable.floating = FALSE)
options(xtable.timestamp = "")
xtable(fit)
tli
tli
library(tli)
library(xtable)
xtable(fit)
a = xtable(fit)
a
View(a)
print(a)
print(fit, type = 'html')
print(a, type = 'html')
print(a, caption = 'asdf')
print(xtable::xtable(a))
table2
class(table2)
xtable(table2)
