dataParks [1:floor ( trainf *nParks ),])
Ttrain = matrix(c(rep(1,floor( trainf*nHealthy)),rep(2, floor ( trainf *nParks))))
Xtest = rbind(dataHealthy[-(1:floor(trainf*nHealthy )),],
dataParks[-(1:floor ( trainf *nParks )),])
Ttest = matrix(c(rep(1,nHealthy-floor(trainf*nHealthy)),
rep(2,nParks-floor( trainf *nParks))))
#===========================================#
#LS Regression by hand
#===========================================#
#STANDARDIZE
Xtrain1 = cbind(1,scale(Xtrain))
#CALCULATE W (COEFFS FOR LS REGRESSION)
w = solve(t(Xtrain1)%*%Xtrain1,t(Xtrain1)%*%Ttrain)
w
View(w)
Xtrain1 = cbind(1,scale(Xtrain))
w = solve(t(Xtrain1)%*%Xtrain1,t(Xtrain1)%*%Ttrain)
View(w)
TtrainPredicted = Xtrain1 %*% w
TtestPredicted = cbind(1,scale(Xtest)) %*% w
pCorrectTrain = sum(apply(abs(cbind(TtrainPredicted-1, TtrainPredicted-2)),
1, which.min) == Ttrain) / length(Ttrain) * 100.0
makeQDADiscF = function(mean,sigma,prior,X) {
sigmaInv = solve(sigma)
diff= X - matrix(mean,nrow(X),ncol(X),byrow=TRUE)
return(-0.5 * log(det(sigma)) - 0.5 * rowSums(diff %*% sigmaInv * diff) + log(prior))
}
makeQDADiscF
qdadisc1tr = makeQDADiscF(mean1,cov1,nHealthy/(nHealthy+nParks),Xtrains)
mean1 = colMeans(Xtrains[Ttrain==1,])
cov1 = cov(Xtrains[Ttrain==1,])
mean2 = colMeans(Xtrains[Ttrain==2,])
cov2 = cov(Xtrains[Ttrain==2,])
N = nHealthy + nParks
covavg = cov1 * nHealthy/N + cov2 * nParks/N
#Form the QDA discriminant functions
makeQDADiscF = function(mean,sigma,prior,X) {
sigmaInv = solve(sigma)
diff= X - matrix(mean,nrow(X),ncol(X),byrow=TRUE)
return(-0.5 * log(det(sigma)) - 0.5 * rowSums(diff %*% sigmaInv * diff) + log(prior))
}
qdadisc1tr = makeQDADiscF(mean1,cov1,nHealthy/(nHealthy+nParks),Xtrains)
qdadisc2tr = makeQDADiscF(mean2,cov2,nParks/(nHealthy+nParks),Xtrains)
qdadisc1ts = makeQDADiscF(mean1,cov1,nHealthy/(nHealthy+nParks),Xtests)
qdadisc2ts = makeQDADiscF(mean2,cov2,nParks/(nHealthy+nParks),Xtests)
Xtrains = scale(Xtrain)
Xtests = scale(Xtest)
mean1 = colMeans(Xtrains[Ttrain==1,])
cov1 = cov(Xtrains[Ttrain==1,])
mean2 = colMeans(Xtrains[Ttrain==2,])
cov2 = cov(Xtrains[Ttrain==2,])
N = nHealthy + nParks
covavg = cov1 * nHealthy/N + cov2 * nParks/N
#Form the QDA discriminant functions
makeQDADiscF = function(mean,sigma,prior,X) {
sigmaInv = solve(sigma)
diff= X - matrix(mean,nrow(X),ncol(X),byrow=TRUE)
return(-0.5 * log(det(sigma)) - 0.5 * rowSums(diff %*% sigmaInv * diff) + log(prior))
}
qdadisc1tr = makeQDADiscF(mean1,cov1,nHealthy/(nHealthy+nParks),Xtrains)
qdadisc2tr = makeQDADiscF(mean2,cov2,nParks/(nHealthy+nParks),Xtrains)
qdadisc1ts = makeQDADiscF(mean1,cov1,nHealthy/(nHealthy+nParks),Xtests)
qdadisc2ts = makeQDADiscF(mean2,cov2,nParks/(nHealthy+nParks),Xtests)
qdadisc1tr
p=par(mfrow=c(1,2),bty="n")
matplot(cbind(Ttrain, TtrainPredicted ), type="b",pch=1,lty=1,
xlab="Sample",ylab="True and Predicted Class",main="Train Data")
matplot(cbind(Ttest,TtestPredicted ), type="b",pch=1,lty=1,
xlab="Sample",ylab="True and Predicted Class",main="Test Data")
par(p)
Xtrains = scale(Xtrain)
Xtrains
View(Xtrains)
[Ttrain == 1, ]
Xtrains[Ttrain == 1,]
Xtrains = scale(Xtrain)
Xtests = scale(Xtest)
mean1 = colMeans(Xtrains[Ttrain==1,])
mean1
Ttrain
cov1
View(cov1)
?solve
death_age_survivor = select(titanic, Sex, Age, Survived)
ggplot(death_age_survivor, aes(x = Sex, y = Age, col = Survived)) + geom_point()
library(DBI)
data = read.csv('http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv')
a =  lm(Sales~TV, data =)
a =  lm(Sales~TV, data = data)
a
summary(a)
water = read.csv("AguaH.csv")
set.seed(42); sample(1:10)
set.seed(42); sample(1:10)
set.seed(42); sample(1:10)
set.seed(42); sample(1:10)
set.seed(42); sample(1:10)
set.seed(42); sample(1:10)
sample(1:10)
sample(1:10)
sample(1:10)
set.seed(42); sample(1:10)
set.seed(42); sample(1:10)
set.seed(42); sample(1:10)
library(class)
train.X=cbind(Lag1 ,Lag2)[train ,]
attach(Smarket)
library(class)
library(ISLR)
train.X=cbind(Lag1 ,Lag2)[train ,]
names(Smarket)
attach(Smarket)
?attach
attach(Smarket)
train.X=cbind(Lag1 ,Lag2)[train ,]
test.X=cbind(Lag1,Lag2)[!train,]
train =( Year <2005)
train = (Year < 2005)
train
train.X = cbind(Lag1, Lag2)[train,]
test.X = cbind(Lag1, Lag2)[!train,]
train.Direction = Direction[train]
train.X
set.seed (1)
knn.pred=knn(train.X,test.X,train.Direction ,k=1)
table(knn.pred,Direction.2005)
set.seed (1)
knn.pred = knn(train.X,test.X,train.Direction ,k=1)
table(knn.pred, Direction.2005)
X.train
train.X
head(train.X)
train.Direction
train
head(train.X)
Smarket
head(Smarkte)
head(Smarket)
table(knn.pred, Smarket$Direction.2005)
knn.pred = knn(train.X, test.X, train.Direction, k=1)
knn.pred
class(knn.pred)
count(knn.pred)
nrow(knn.pred)
length(knn.pred)
nrow(Smarktet$Direction)
nrow(Smarket$Direction)
Smarket$Direction
Smarket$Direction[Smarket$Year == 2005]
table(knn.pred, Smarket$Direction[Smarket$Year == 2005])
knn.pred = knn(train.X, test.X, train.Direction, k=3)
table(knn.pred, Smarket$Direction[Smarket$Year == 2005])
knn.pred = knn(train.X, test.X, train.Direction, k=5)
table(knn.pred, Smarket$Direction[Smarket$Year == 2005])
mean(knn.pred == Smarket$Direction[Smarket$Year == 2005])
knn.pred = knn(train.X, test.X, train.Direction, k=4)
table(knn.pred, Smarket$Direction[Smarket$Year == 2005])
mean(knn.pred == Smarket$Direction[Smarket$Year == 2005])
knn.pred = knn(train.X, test.X, train.Direction, k=3)
table(knn.pred, Smarket$Direction[Smarket$Year == 2005])
mean(knn.pred == Smarket$Direction[Smarket$Year == 2005])
table(knn.pred, Smarket$Direction[Smarket$Year == 2005])
mean(knn.pred == Smarket$Direction[Smarket$Year == 2005])
knn.pred4 = knn(train.X, test.X, train.Direction, k=4)
mean(knn.pred == Smarket$Direction[Smarket$Year == 2005])
knn.pred3 = knn(train.X, test.X, train.Direction, k=3)
mean(knn.pred == Smarket$Direction[Smarket$Year == 2005])
mean(knn.pred2 == Smarket$Direction[Smarket$Year == 2005])
mean(knn.pred1 == Smarket$Direction[Smarket$Year == 2005])
mean(knn.pred2 == Smarket$Direction[Smarket$Year == 2005])
mean(knn.pred3 == Smarket$Direction[Smarket$Year == 2005])
mean(knn.pred4 == Smarket$Direction[Smarket$Year == 2005])
mean(knn.pred5 == Smarket$Direction[Smarket$Year == 2005])
knn.pred2 = knn(train.X, test.X, train.Direction, k=2)
knn.pred3 = knn(train.X, test.X, train.Direction, k=3)
knn.pred4 = knn(train.X, test.X, train.Direction, k=4)
knn.pred5 = knn(train.X, test.X, train.Direction, k=5)
mean(knn.pred1 == Smarket$Direction[Smarket$Year == 2005])
mean(knn.pred2 == Smarket$Direction[Smarket$Year == 2005])
mean(knn.pred3 == Smarket$Direction[Smarket$Year == 2005])
mean(knn.pred4 == Smarket$Direction[Smarket$Year == 2005])
mean(knn.pred5 == Smarket$Direction[Smarket$Year == 2005])
library(carat)
install.packages(carat)
install.packages('carat')
install.packages('caret')
library(caret)
library('caret')
iris
head(iris)
head(iris)
table(iris$Species)
prop.table(iris$Species)
table(iris$Species)
prop.table(table(iris$Species))
trainIndex = createDataPartition(iris$Species, p = 0.7, list = FALSE)
trainIndex
nrow(trainIndex)
nrow(iris)
150*0.7
iris[trainIndex, ]
iris[c(1,3),]
head(trainIndex)
train = iris[trainIndex, ]
head(train)
test = iris[-trainIndex, ]
head(test)
nrow(test)
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10)
fitControl
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10)
fitControl
fitControl
head(fitControl)
model.rf = train(Species ~ ., data = train, method = 'rf', trControl = fitControl)
model.rf = train(Species ~ ., data = train, method = 'rf', trControl = fitControl)
library(e1071)
install.packages('e1071')
library(e1071)
model.rf = train(Species ~ ., data = train, method = 'rf', trControl = fitControl)
model.rf
fitControl <- trainControl(method = "repeatedcv", number = 10)
model.rf = train(Species ~ ., data = train, method = 'kknn', trControl = fitControl)
model.rf = train(Species ~ ., data = train, method = 'rf', trControl = fitControl)
model.kknn = train(Species ~ ., data = train, method = 'kknn', trControl = fitControl)
model.kknn
predict(model.rf, test)
prop.table(model.rf.pred)
model.rf.pred = predict(model.rf, test)
prop.table(model.rf.pred)
prop.table(table(model.rf.pred))
prop.table(table(model.rf.pred, test$Species))
table(model.rf.pred, test$Species))
table(model.rf.pred, test$Species)
model.kknn.pred = predict(model.kknn, test)
table(model.kknn.pred, test$Species)
gbmImp <- varImp(model.rf, scale = FALSE)
gbmImp
gbmImp <- varImp(model.rf, scale = FALSE)
plot(gbmImp)
results = resamples(list(RF = model.rf, KKNN = model.kknn))
bwplot(results)
dotplot(results)
results = resamples(list(RF = model.rf, KKNN = model.kknn))
bwplot(results)
dotplot(results)
xtable
devtools::session_info(xtable)
devtools::session_info('xtable')
devtools::session_info('knitr')
library(rattle)
library(NbClust)
install.packages('rattle')
install.packages('NbClust')
install.packages('vgl')
install.packages('clValid')
install.packages('rgl')
library(rattle)
library(rattle)
library(NbClust)
library(rgl)
library(clValid)
wine
data(wine, packages = 'rattle')
library(rattle)
data(wine, packages = 'rattle')
data(wine)
str(wine)
df = wine
df = scale(df[-1])
df
head(df)
View(wine)
df
str(wine)
df = wine
df = scale(df[-1])
head(df)
wssplot(df, nc = 6)
library(NbClust)
library(rgl)
library(clValid)
nc = NbClust(df, min.nc = 2, max.nc = 15, method 'kmeans')
nc = NbClust(df, min.nc = 2, max.nc = 15, method ='kmeans')
nc$Best.nc[1,]
model.km = kmeans(df, 3, nstart = 25)
set.seed(1234)
model.km = kmeans(df, 3, nstart = 25)
model.km$size
df
head(df)
?kmeans
model.km = kmeans(df, 3, nstart = 25)
model.km$size
model.km = kmeans(df, 3, nstart = 25)
model.km$size
model.km = kmeans(df, 3, nstart = 25)
model.km$size
model.km = kmeans(df, 3, nstart = 25)
model.km = kmeans(df, 3, nstart = 25)
model.km$size
model.km = kmeans(df, 3, nstart = 25)
model.km$size
model.km = kmeans(df, 3, nstart = 25)
model.km$size
model.km = kmeans(df, 3, nstart = 25)
model.km$size
model.km = kmeans(df, 3, nstart = 25)
model.km$size
library(cluster)
head(df)
tail(df)
library(caret)
head(iris)
table(iris$Species)
prop.table(table(iris$Species))
wine
head(wine)
trainIndex = createDataPartition(wine$Type, p = 0.8, list = FALSE)
train = wine[trainIndex, ]
test = wine[-trainIndex, ]
train
head(train)
train
fitControl <- trainControl(method = "repeatedcv", number = 10)
model.rf = train(Type ~ ., data = train, method = 'rf', trControl = fitControl)
model.rf.pred = predict(model.rf, test)
model.rf.pred = predict(model.rf, test)
table(model.rf.pred, test$Type)
model.rf = train(Type ~ ., data = train, method = 'rf', trControl = fitControl)
model.rf.pred = predict(model.rf, test)
table(model.rf.pred, test$Type)
model.kknn = train(Type ~ ., data = train, method = 'kknn', trControl = fitControl)
model.kknn.pred = predict(model.kknn, test)
table(model.kknn.pred, test$Type)
lst = list()
for (model in c('rf', 'kknn')) {
lst[model] = train(Type ~ ., data = train, method = model, trControl = fitControl)
}
lst
model.gbm = train(Type ~ ., data = train, method = 'gbm', trControl = fitControl)
model.gbm = train(Type ~ ., data = train, method = 'gbm', trControl = fitControl)
model.gbm.pred = predict(model.gbm, test)
table(model.gbm.pred, test$Type)
model.gbm.pred
table(model.rf.pred, test$Type)
set.seed(1000)
trainIndex = createDataPartition(wine$Type, p = 0.8, list = FALSE)
train = wine[trainIndex, ]
test = wine[-trainIndex, ]
#random forest
fitControl <- trainControl(method = "repeatedcv", number = 10)
set.seed(1000)
model.rf = train(Type ~ ., data = train, method = 'rf', trControl = fitControl)
model.rf.pred = predict(model.rf, test)
table(model.rf.pred, test$Type)
#knn
set.seed(1000)
model.kknn = train(Type ~ ., data = train, method = 'kknn', trControl = fitControl)
model.kknn.pred = predict(model.kknn, test)
table(model.kknn.pred, test$Type)
#gbm
set.seed(1000)
model.gbm = train(Type ~ ., data = train, method = 'gbm', trControl = fitControl)
model.gbm.pred = predict(model.gbm, test)
table(model.gbm.pred, test$Type)
table(model.rf.pred, test$Type)
print((11+13+9)/(11+13+9+1))
table(model.kknn.pred, test$Type)
print((11+11+9)/(11+11+9+1+2))
table(model.gbm.pred, test$Type)
print((11+13+9)/(11+13+9+1))
table(model.rf.pred, test$Type)
print((11+13+9)/(11+13+9+1))
table(model.gbm.pred, test$Type)
print((11+13+9)/(11+13+9+1))
print((11+11+9)/(11+11+9+1+2))
print((11+13+9)/(11+13+9+1))
print((11+13+9)/(11+13+9+1))
set.seed(99)
model.gbm = train(Type ~ ., data = train, method = 'gbm', trControl = fitControl)
model.gbm.pred = predict(model.gbm, test)
table(model.gbm.pred, test$Type)
print((11+13+9)/(11+13+9+1))
set.seed(1000)
model.gbm = train(Type ~ ., data = train, method = 'gbm', trControl = fitControl)
model.gbm.pred = predict(model.gbm, test)
table(model.gbm.pred, test$Type)
table(model.gbm.pred, test$Type)
print((11+13+9)/(11+13+9+1))
print((11+11+9)/(11+11+9+1+2))
print((11+13+9)/(11+13+9+1))
set.seed(1000)
model.rf = train(Type ~ ., data = train, method = 'rf', trControl = fitControl)
model.rf.pred = predict(model.rf, test)
table(model.rf.pred, test$Type)
print((11+13+9)/(11+13+9+1))
table(model.rf.pred, test$Type)
table(model.kknn.pred, test$Type)
print((11+13+9)/(11+13+9+1))
table(model.gbm.pred, test$Type)
wine
fitControl <- trainControl(method = "cv", number = 10)
set.seed(1000)
model.rf = train(Type ~ ., data = train, method = 'rf', trControl = fitControl)
model.rf.pred = predict(model.rf, test)
table(model.rf.pred, test$Type)
print((11+13+9)/(11+13+9+1))
model.kknn = train(Type ~ ., data = train, method = 'kknn', trControl = fitControl)
model.kknn.pred = predict(model.kknn, test)
table(model.kknn.pred, test$Type)
print((11+11+9)/(11+11+9+1+2))
model.gbm = train(Type ~ ., data = train, method = 'gbm', trControl = fitControl)
model.gbm.pred = predict(model.gbm, test)
table(model.gbm.pred, test$Type)
print((11+13+9)/(11+13+9+1))
model.rf
trace(table(model.rf.pred, test$Type))
sum(test$Type == predict(model.rf, test)) / length(test$Type)
sum(test$Type == predict(model.kknn, test)) / length(test$Type)
sum(test$Type == predict(model.gbm, test)) / length(test$Type)
library(nnet)
library(neuralnet)
install.packages('neuralnet')
library(neuralnet)
edu = read.csv('../data/final.csv', stringsAsFactors = FALSE)
setwd("~/Desktop/Me/Classes/Stat 159/Stat159/stat159-fall2016-hw03/code/scripts")
advertising <- read.csv('../../data/Advertising.csv')
adv_reg = lm(Sales ~ TV + Radio + Newspaper, data = advertising)
adv_reg_summary = summary(adv_reg)
tv = lm(Sales ~ TV, data = advertising)
tv_reg_summary = summary(tv)
radio = lm(Sales ~ Radio, data = advertising)
radio_reg_summary = summary(radio)
newspaper_reg_summary = summary(newspaper)
newspaper = lm(Sales ~ Newspaper, data = advertising)
save(advertising, adv_reg, adv_reg_summary, tv_reg_summary, radio_reg_summary, newspaper_reg_summary,
file = '../../data/regression.RData')
png('../../images/scatterplot-tv-sales.png')
plot(advertising$TV, advertising$Sales, main = "TV vs Sales", xlab = "TV", ylab = 'Sales')
dev.off()
png('../../images/scatterplot-radio-sales.png')
dev.off()
plot(advertising$Radio, advertising$Sales, main = "TV vs Radio", xlab = "Radio", ylab = 'Sales')
advertising <- read.csv('../../data/Advertising.csv')
adv_reg = lm(Sales ~ TV + Radio + Newspaper, data = advertising)
adv_reg_summary = summary(adv_reg)
tv = lm(Sales ~ TV, data = advertising)
tv_reg_summary = summary(tv)
radio = lm(Sales ~ Radio, data = advertising)
radio_reg_summary = summary(radio)
newspaper = lm(Sales ~ Newspaper, data = advertising)
newspaper_reg_summary = summary(newspaper)
save(advertising, adv_reg, adv_reg_summary, tv_reg_summary, radio_reg_summary, newspaper_reg_summary,
file = '../../data/regression.RData')
png('../../images/scatterplot-tv-sales.png')
plot(advertising$TV, advertising$Sales, main = "TV vs Sales", xlab = "TV", ylab = 'Sales')
dev.off()
png('../../images/scatterplot-radio-sales.png')
plot(advertising$Radio, advertising$Sales, main = "TV vs Radio", xlab = "Radio", ylab = 'Sales')
dev.off()
png('../../images/scatterplot-newspaper-sales.png')
plot(advertising$Newspaper, advertising$Sales, main = "TV vs Newspaper", xlab = "Newspaper", ylab = 'Sales')
dev.off()
png('../../images/residual-plot.png')
plot(ad_reg, which = 1)
dev.off()
png('../../images/residual-plot.png')
plot(adv_reg, which = 1)
dev.off()
png('../../images/scale-location-plot.png')
plot(adv_reg, which = 2)
dev.off()
png('../../images/normal-qq-plot.png')
plot(adv_reg, which = 3)
dev.off()
setwd("~/Desktop/Me/Classes/Stat 159/Stat159/stat159-fall2016-hw03/code/scripts")
advertising = read.csv('../../data/Advertising.csv')
correlation = cor(advertising[,2:5])
save(correlation, file = '../../data/correlation-matrix.RData')
cat('<Summary Statistics of Advertising Data Set>\n', file = '../../data/eda-output.txt')
sink(file = '../../data/eda-output.txt', append = T)
cat('\nSales\n')
summary(advertising$Sales)
cat('TV\n')
summary(advertising$TV)
cat('\nRadio\n')
summary(advertising$Radio)
cat('\nNewspaper\n')
summary(advertising$Newspaper)
cat('\nCorrelation Matrix\n')
correlation
sink()
png('../../images/histogram-sales.png')
hist(advertising$Sales, main = "Sales", xlab = "Thousands of units")
dev.off()
png('../../images/histogram-tv.png')
hist(advertising$TV, main = "TV", xlab = "Thousands of dollars")
dev.off()
png('../../images/histogram-radio.png')
hist(advertising$Radio, main = "Radio", xlab = "Thousands of dollars")
dev.off()
png('../../images/histogram-newspaper.png')
hist(advertising$Newspaper, main = "Newspaper", xlab = "Thousands of dollars")
dev.off()
png('../../images/scatterplot-matrix.png')
plot(advertising[,2:5], main = 'Scatterplot Matrix of Advertising Data')
dev.off()
